{% if _framework == "langchain" %}from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent
from coinbase_agentkit_langchain import get_langchain_tools{% elif _framework == "openai_agents" %}from coinbase_agentkit_openai_agents_sdk import get_openai_agents_sdk_tools
from agents.agent import Agent{% endif %}

from coinbase_agentkit import (
    AgentKit,
    AgentKitConfig,
    CdpEvmWalletProvider,
    CdpEvmWalletProviderConfig,
    cdp_api_action_provider,
    erc20_action_provider,
    pyth_action_provider,
    wallet_action_provider,
    weth_action_provider,
)

"""
AgentKit Configuration

This file serves as the entry point for configuring AgentKit tools and wallet providers.
It handles wallet setup, persistence, and initializes AgentKit with the appropriate providers.

# Key Steps to Configure AgentKit:

1. Set up your WalletProvider:
   - Learn more: https://github.com/coinbase/agentkit/tree/main/python/agentkit#evm-wallet-providers

2. Set up your Action Providers:
   - Action Providers define what your agent can do.
   - Choose from built-in providers or create your own:
     - Built-in: https://github.com/coinbase/agentkit/tree/main/python/coinbase-agentkit#create-an-agentkit-instance-with-specified-action-providers
     - Custom: https://github.com/coinbase/agentkit/tree/main/python/coinbase-agentkit#creating-an-action-provider

# Next Steps:

- Explore the AgentKit README: https://github.com/coinbase/agentkit
- Learn more about available WalletProviders & Action Providers.
- Experiment with custom Action Providers for your unique use case.

## Want to contribute?
Join us in shaping AgentKit! Check out the contribution guide:
- https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING.md
- https://discord.gg/CDP
"""

# Shared agent instructions
AGENT_INSTRUCTIONS = (
    "You are a helpful AI agent with built-in financial capabilities through your secure digital wallet. "
    "You're designed to help users understand and explore what an AI agent can do with payment capabilities.\n\n"
    
    "Key things to know about your wallet:\n"
    "- You have one wallet per network (like having different bank accounts in different countries)\n"
    "- When you are on Base Sepolia (a test network), you can get free test tokens (ETH/USDC) using the faucet command\n"
    "- Users can change your network by updating NETWORK_ID in their .env file\n\n"
    
    "Your core capabilities:\n"
    "- Check wallet balance\n"
    "- Send and receive tokens\n"
    "- Make secure financial decisions\n\n"
    
    "Common questions you should be ready to explain:\n"
    "- What a test network is and why it's useful for development\n"
    "- How to get test tokens using the faucet\n"
    "- How to switch networks when they're ready\n"
    "- The value of having an AI agent with payment capabilities\n\n"
    
    "Keep your responses friendly and educational. If users encounter technical terms, explain them simply. "
    "If there's a 5XX error, explain that the service is temporarily unavailable and to try again later. "
    "If asked to do something beyond your current capabilities, explain what you can do and suggest they check "
    "docs.cdp.coinbase.com for implementing additional features."
    "You can also explain that developers can create any action they want and add them to your toolset.\n\n"
    
    "Remember: You're not just a crypto tool - you're an AI agent with the ability to make and receive payments, "
    "which opens up new possibilities for automation and interaction."
)

{% if _framework == "openai_agents" %}async {% endif %}def initialize_agent(config):
    """Initialize the agent with the provided configuration.

    Args:
        config: Configuration object for the wallet provider

    Returns:
        tuple[Agent, dict]: The initialized agent and its configuration
    """
    # Initialize CDP EVM Wallet Provider
    wallet_provider = CdpEvmWalletProvider(
        CdpEvmWalletProviderConfig(
            api_key_id=config.api_key_id,
            api_key_secret=config.api_key_secret,
            wallet_secret=config.wallet_secret,
            network_id=config.network_id,
            address=config.address,
            idempotency_key=config.idempotency_key,
        )
    )

    # Initialize AgentKit
    agentkit = AgentKit(
        AgentKitConfig(
            wallet_provider=wallet_provider,
            action_providers=[
                cdp_api_action_provider(),
                erc20_action_provider(),
                pyth_action_provider(),
                wallet_action_provider(),
                weth_action_provider(),
            ],
        )
    )

    {% if _framework == "langchain" %}# Initialize LLM
    llm = ChatOpenAI(model="gpt-4o-mini")

    # Get Langchain tools
    tools = get_langchain_tools(agentkit)

    # Store buffered conversation history in memory
    memory = MemorySaver()

    # Create ReAct Agent using the LLM and AgentKit tools
    return (
        create_react_agent(
            llm,
            tools=tools,
            checkpointer=memory,
            state_modifier=AGENT_INSTRUCTIONS,
        ),
        wallet_provider
    )
    {% elif _framework == "openai_agents" %}# Get OpenAI Agents SDK tools
    tools = get_openai_agents_sdk_tools(agentkit)

    # Create Agent using the OpenAI Agents SDK
    agent = Agent(
        name="CDP Agent",
        instructions=AGENT_INSTRUCTIONS,
        tools=tools
    )

    return agent, wallet_provider{% endif %} 